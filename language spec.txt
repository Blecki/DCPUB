A high level overview of DCPUC

program = *(statement | function declaration)
statement = (variable declaration | function declaration | if | while | assignment | function call | block) + ;
variable declaration = ("var" | "static" | "const") + identifier + "=" + expression
function declaration = "function" + identifier(comma-separated parameter list) + "{" + *statement + "}"
if = if (expression) statement [Optional else statement]
while = while (expression) statement
assignment = expression + "=" + expression
function call = identifier(parameters)
block = { statements }
expression = binary operation [+-*/%<<>>&^|] | number literal | data literal | function call
data literal = & (number | character | string | array)+
array = "[" + number + "]"

Like C, all statements are terminated with ';'.
Execution begins at the first statement in the file (skipping function declarations).
Variables are declared with a 'var', 'static', or 'const' statement. The variable type comes after the name, like this 'var a:unsigned = 5u;' Variable types are optional and defaults to unsigned.
Variables must be initialized.
The suffix 'u' denotes an unsigned integer. Otherwise, integer literals have type signed. Hex literals have type unsigned.
In conditionals, 0 = false, anything else = true. So far, only ==, !=, > and < are supported. Using any expression as the conditional works, but comparison operators may produce more efficient assembly. 
All functions return a value. If a function does not have a return statement, then whatever is left in A when it returns will be assumed to be the return value. Function return types follow the function header, like this 'function foo(a,b,c):unsigned {}'. The return type is optional and defaults to unsigned.
The unary * operator 'dereferences' whatever it is applied to. It will return the value at the value of it's operand. It is the same as the [] syntax in the DCPU-16 spec, or a pointer in C. It can also be assigned to. For example, var video = 0x8000; *video = 72; will write the character 'H' to address 0x8000, the first word of video memory.

Data literals are static literals stored in program ram. A chain of strings ("in quotes"), number literals, or [numbers in brackets] separated only by spaces is a data literal. Data literals will be placed somewhere in memory, and your code will get the address of the data. In the example var a = "string"; the value of a will be the address at which "string" is stored. [N] will create a literal with N elements, all of which will be initiated to 0.
[N] which is not part of a data literal is interpretted as a stack allocated array. For example, var a = [10]; will make space for 10 elements on the stack, and assign their address to a. The first element will be at *a, the second at *(a+1), etc.

Variables

'var' denotes an ordinary local variable. They will usually reside on the stack, but may be optimized by using registers.
'static' denotes a variable that is allocated static memory. If it is initialized with a data literal, that data literal is given another separate block of memory, and the static variable is initialized to point to it.
'const' denotes a variable that gets allocated no memory. If it is initialized with an integral constant, it will behave like a straight text replacement. If it is initialized with a data literal, the data literal will be stored in static memory and the variable will behave like a straight text replacement with the address of that data literal.
Both static and const variables must be initialized to a constant computable at compile time.

The DCPUC standard library

(I apologize for the inclusion of standard functions currently being broken)
itoa(number, pointer) : Converts number to display characters and writes it to *pointer. Returns a pointer to one word past the last write (pointer + strlen(coverted number))
strlen(pointer) : returns the length of the string pointed to by pointer. Assumes 0 termination.
strcpy(pointerA, pointerB) : copies string A to string B, until 0 is found in A. Does not copy the 0.

DCPUC Calling Convention

DCPUC (attempts to) conforms to https://github.com/0x10cStandardsCommittee/0x10c-Standards/blob/master/ABI/ABI%20draft%202.txt 
It may be broken.