A high level overview of DCPUC

program = *(statement)
statement = variable declaration | function declaration | if | assignment | function call | block
variable declaration = var identifier
function declaration = function identifier(comma-separated parameter list) { statements }
if = if (expression) statement
assignment = expression = expression
function call = identifier(parameters)
block = { statements }

Like C, all statements are terminated with ';'.
Execution begins at the first statement in the file (skipping function declarations).
Variables have no type and are declared with a 'var' statement.
Variables must be initialized
In conditionals, 0 = false, anything else = true. So far, only == and != are supported.
All functions return a value. If a function does not have a return statement, then whatever is left in A when it returns will be assumed to be the return value. 
The unary * operator 'dereferences' whatever it is applied to. It will return the value at the value of it's operand. It is the same as the [] syntax in the DCPU-16 spec, or a pointer in C. It can also be assigned to. For example, var video = 0x8000; *video = 72; will write the character 'H' to address 0x8000, the first word of video memory.

DCPUC Calling Convention

First three arguments are passed in registers A, B and C.
Remaining arguments are pushed onto the stack left-to-right (Such that the last argument has the lowest address)
Push the return address last (Using the JSR instruction is preferred)
Return value is placed in A.

Callee is free to clobber all registers.
Caller must preserve the registers it cares about (Which includes A, B and C, which may be it's own parameters).
The Caller removes any arguments on the stack itself.

A sample program and the generated assembly, illustrating a function call.

function foo(a,b,c,d) {
return foo(1,2,3,4);
}

foo(1,2,3,4);

SET A, 0x0001 ;Literal
SET B, 0x0002 ;Literal
SET C, 0x0003 ;Literal
SET PUSH, 0x0004 ;Literal
JSR LABEL1_foo ;Calling function
ADD SP, 0x0001 ;Remove parameters
BRK ;Non-standard
:LABEL1_foo
SET PUSH, A ;Saving register
SET A, 0x0001 ;Literal
SET PUSH, B ;Saving register
SET B, 0x0002 ;Literal
SET PUSH, C ;Saving register
SET C, 0x0003 ;Literal
SET PUSH, X ;Saving register
SET PUSH, 0x0004 ;Literal
JSR LABEL1_foo ;Calling function
ADD SP, 0x0001 ;Remove parameters
SET J, A ;Save return value from being overwritten by stored register
SET X, POP ;Restoring register
SET C, POP ;Restoring register
SET B, POP ;Restoring register
SET A, POP ;Restoring register
SET X, J
SET A, X
SET PC, POP ;Return
SET PC, POP ;Return
