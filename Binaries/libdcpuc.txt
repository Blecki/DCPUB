;Print the size of this program
SET A, 0x0000
JSR strlen_FUNCTION
SET B, 0x8000
JSR itoa_FUNCTION
SUB PC, 0x1

;DCPUC FUNCTION itoa itoa_FUNCTION 2 number *dest
;Writes the digits to *dest, returns end of written buffer.
:itoa_FUNCTION	
IFG 0xA, A
SET PC, itoa_REST
SET PUSH, A
DIV A, 0xA		
JSR itoa_FUNCTION	
SET A, POP
:itoa_REST
MOD A, 0xA  
ADD A, 0x30
SET [B], A
ADD B, 0x1
SET A, B
SET PC, POP		
;DCPUC ENDFUNCTION

;DCPUC FUNCTION strlen strlen_FUNCTION 1 *char
;Returns the length of the string
:strlen_FUNCTION
SET B, A
:strlen_LOOP
IFE [A], 0x0
SET PC, strlen_LEAVE
ADD A, 0x1
SET PC, strlen_LOOP
:strlen_LEAVE
SUB A, B
SET PC, POP
;DCPUC ENDFUNCTION

;DCPUC FUNCTION strcpy strcpy_FUNCTION 2 *char a, *char b
;Copies a into b, does not copy trailing null
:strcpy_FUNCTION
IFE [A], 0x0
SET PC, strcpy_LEAVE
SET [B], [A]
ADD B, 0x1
ADD A, 0x1
SET PC, strcpy_FUNCTION
:strcpy_LEAVE
SET A, B
SET PC, POP
;DCPUC ENDFUNCTION

;DCPUC FUNCTION abort dcpuc_abort 1 *char
;Prints the message and aborts program
:dcpuc_abort
SET B, 0x8000
JSR strcpy_FUNCTION
BRK
;DCPUC ENDFUNCTION

;DCPUC STATIC
:DCPUC_MR_HEAPHEAD DAT 0x0
:DCPUC_MR_HEAPEND DAT 0x0
:DCPUC_MR_HEAPFREE DAT 0x0
:DCPUC_MR_OUTOFMEMORYERROR DAT "Fatal Error: out of memory" 0x0
;DCPUC END

;DCPUC FUNCTION init_mrheap dcpuc_init_mrheap 2 *memstart, *memend
;Initializes a mark-and-release heap from memstart to memend
:dcpuc_init_mrheap
SET [DCPUC_MR_HEAPHEAD], A
SET [DCPUC_MR_HEAPFREE], A
SET [DCPUC_MR_HEAPEND], B
SET PC, POP
;DCPUC END

;DCPUC FUNCTION mrmalloc dcpuc_mrmalloc 1 length
;Returns address of free block of size length
:dcpuc_mrmalloc
SET C, [DCPUC_MR_HEAPFREE]
ADD [DCPUC_MR_HEAPFREE], A
IFG [DCPUC_MR_HEAPEND], [DCPUC_MR_HEAPFREE]
SET PC, DCPUC_MRMALLOC_0
SET A, DCPUC_MR_OUTOFMEMORYERROR
JSR dcpuc_abort ;Never returns
:DCPUC_MRMALLOC_0
SET A, C
SET PC, POP
;DCPUC END
