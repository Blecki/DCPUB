//DCPUC struct example

//Working syntax

const VEC3D_X = 0x0;
const VEC3D_Y = 0x1;
const VEC3D_Z = 0x2;
const VEC3D_SIZE = 0x3;

function VEC3D_add(a, b)
{
	*(a + VEC3D_X) = *(a + VEC3D_X) + *(b + VEC3D_Y);
	*(a + VEC3D_Y) = *(a + VEC3D_Y) + *(b + VEC3D_Y);
	*(a + VEC3D_Z) = *(a + VEC3D_Z) + *(b + VEC3D_Z);
}

//var point = [POINT3D_SIZE]; //Constant folding is broken
var point = [3];
*(point + VEC3D_X) = 1;
*(point + VEC3D_Y) = 2;
*(point + VEC3D_Z) = 4;

//Alternative, if you can initialize in static memory
var point2 = &1 2 4;
VEC3D_add(point, point2);

//Proposed equivilant 'sugar coated' syntax

struct VEC3D { X; Y; Z; }
function VEC3D_add(a, b)
{
	a[VEC3D:X] = a[VEC3D:X] + b[VEC3D:X];
	a[VEC3D:Y] = a[VEC3D:Y] + b[VEC3D:Y];
	a[VEC3D:Z] = a[VEC3D:Z] + b[VEC3D:Z];
}

var point = [sizeof(VEC3D)];
point[VEC3D:X] = 1;
point[VEC3D:Y] = 2;
point[VEC3D:Z] = 3;

var point2 = &1 2 4; //All the old syntax continues to work
VEC3D_add(point, point2);

//Proposed equivilant 'typed' syntax

struct VEC3D { X; Y; Z; }
function VEC3D_add(a:VEC3D, b:VEC3D)
{
	a.X = a.X + b.X;
	a.Y = a.Y + b.Y;
	a.Z = a.Z + b.Z;
}

var point:VEC3D = [sizeof(VEC3D)];
point.X = 1;
point.Y = 2;
point.Z = 4;

var point2 = &1 2 4;
VEC3D_add(point, point2);
